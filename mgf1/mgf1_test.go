/******************************************************************************
 * NTRU Cryptography Reference Source Code
 * Copyright (c) 2009-2013, by Security Innovation, Inc. All rights reserved.
 *
 * Copyright (C) 2009-2013  Security Innovation
 * Copyright (C) 2014  Yawning Angel (yawning at schwanenlied dot me)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *********************************************************************************/

package mgf1

import (
	"bytes"
	"crypto/sha1"
	"crypto/sha256"
	"testing"
)

func TestPositiveSHA1(t *testing.T) {
	seed := []byte{
		0xaa, 0xfd, 0x12, 0xf6, 0x59, 0xca, 0xe6, 0x34,
		0x89, 0xb4, 0x79, 0xe5, 0x07, 0x6d, 0xde, 0xc2,
		0xf0, 0x6c, 0xb5, 0x8f,
	}
	exp := []byte{
		0x06, 0xe1, 0xde, 0xb2, 0x36, 0x9a, 0xa5, 0xa5,
		0xc7, 0x07, 0xd8, 0x2c, 0x8e, 0x4e, 0x93, 0x24,
		0x8a, 0xc7, 0x83, 0xde, 0xe0, 0xb2, 0xc0, 0x46,
		0x26, 0xf5, 0xaf, 0xf9, 0x3e, 0xdc, 0xfb, 0x25,
		0xc9, 0xc2, 0xb3, 0xff, 0x8a, 0xe1, 0x0e, 0x83,
		0x9a, 0x2d, 0xdb, 0x4c, 0xdc, 0xfe, 0x4f, 0xf4,
		0x77, 0x28, 0xb4, 0xa1, 0xb7, 0xc1, 0x36, 0x2b,
		0xaa, 0xd2, 0x9a, 0xb4, 0x8d, 0x28, 0x69, 0xd5,
		0x02, 0x41, 0x21, 0x43, 0x58, 0x11, 0x59, 0x1b,
		0xe3, 0x92, 0xf9, 0x82, 0xfb, 0x3e, 0x87, 0xd0,
		0x95, 0xae, 0xb4, 0x04, 0x48, 0xdb, 0x97, 0x2f,
		0x3a, 0xc1, 0x4e, 0xaf, 0xf4, 0x9c, 0x8c, 0x3b,
		0x7c, 0xfc, 0x95, 0x1a, 0x51, 0xec, 0xd1, 0xdd,
		0xe6, 0x12, 0x64,
	}

	mgf := New(sha1.New, 1, false, seed, 0, len(seed))
	out := make([]byte, len(exp))
	out[0], _ = mgf.ReadByte()
	out[1], _ = mgf.ReadByte()
	out[2], _ = mgf.ReadByte()
	offset := 3
	n, err := mgf.Read(out[offset : offset+4])
	if err != nil {
		t.Error(err)
	}
	offset += n
	n, err = mgf.Read(out[offset:])
	if err != nil {
		t.Error(err)
	}
	if bytes.Compare(out, exp) != 0 {
		t.Error("out != exp")
	}
}

func TestPositiveSHA256(t *testing.T) {
	seed := []byte{
		0xff, 0xfd, 0x12, 0xf6, 0x59, 0xca, 0xe6, 0x34,
		0x89, 0x32, 0x79, 0xe5, 0x07, 0x6d, 0xde, 0xc2,
		0xf0, 0x6c, 0x21, 0x8f,
	}
	exp := []byte{
		0x98, 0xc1, 0xa4, 0xfc, 0xb9, 0x40, 0x71, 0x15,
		0x9b, 0x17, 0x6e, 0xa7, 0x01, 0x1e, 0xb6, 0x48,
		0x57, 0xca, 0xe3, 0xff, 0x27, 0x5a, 0xb6, 0x6f,
		0xa7, 0x38, 0xe8, 0xcb, 0xf7, 0x7a, 0x51, 0xe7,
		0xd8, 0xa2, 0x17, 0x48, 0x0b, 0x78, 0x39, 0x66,
		0x45, 0x8a, 0x44, 0x59, 0x0a, 0xe8, 0x7d, 0x9a,
		0x49, 0xd1, 0x92, 0xe3, 0xae, 0x7d, 0xb2, 0x57,
		0xf0, 0xff, 0x94, 0xdd, 0xc2, 0xda, 0x35, 0x72,
		0x72, 0xe5, 0x67, 0x9f, 0x92, 0xb7, 0x67, 0x7d,
		0x13, 0x23, 0x41, 0xac, 0xd2, 0x55, 0x44, 0xd3,
		0xe6, 0x21, 0xcb, 0xaa, 0xeb, 0x80, 0x9d, 0x09,
		0x5d, 0x65, 0xbb, 0x72, 0x9a, 0x81, 0xa5, 0xd8,
		0x25, 0x17, 0xba, 0x41, 0xd2, 0x52, 0x3b, 0xb2,
		0x3a, 0x00, 0xae,
	}
	mgf := New(sha256.New, 1, false, seed, 0, len(seed))
	out := make([]byte, len(exp))
	out[0], _ = mgf.ReadByte()
	out[1], _ = mgf.ReadByte()
	out[2], _ = mgf.ReadByte()
	offset := 3
	n, _ := mgf.Read(out[offset : offset+4])
	offset += n
	out[7], _ = mgf.ReadByte()
	out[8], _ = mgf.ReadByte()
	out[9], _ = mgf.ReadByte()
	offset += 3
	n, _ = mgf.Read(out[offset : offset+4])
	offset += n
	n, _ = mgf.Read(out[offset:])
	if bytes.Compare(out, exp) != 0 {
		t.Error("out != exp")
	}
}
